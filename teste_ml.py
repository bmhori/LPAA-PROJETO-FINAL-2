# -*- coding: utf-8 -*-
"""teste ml

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vPFW9ozWTabbtSb925Pcgh1jtwZU7Ukj
"""

!git clone https://github.com/bmhori/LPAA-PROJETO-FINAL-2.git

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

# Carregar os dados
data = {
    'Disease': ['Fungal infection', 'Allergy', 'GERD', 'Chronic cholestasis', 'Peptic ulcer disease', 'Diabetes', 'Dengue'],
    'Symptom_1': ['itching', 'continuous_sneezing', 'stomach_pain', 'itching', 'vomiting', 'fatigue', 'skin_rash'],
    'Symptom_2': ['skin_rash', 'shivering', 'acidity', 'vomiting', 'loss_of_appetite', 'weight_loss', 'chills'],
    'Symptom_3': ['nodal_skin_eruptions', 'chills', 'ulcers_on_tongue', 'yellowish_skin', 'abdominal_pain', 'restlessness', 'joint_pain'],
    'Symptom_4': ['dischromic_patches', 'watering_from_eyes', 'vomiting', 'nausea', 'passage_of_gases', 'lethargy', 'vomiting'],
    'Symptom_5': ['', '', 'cough', 'loss_of_appetite', 'internal_itching', 'irregular_sugar_level', 'fatigue'],
    'Symptom_6': ['', '', 'chest_pain', 'abdominal_pain', '', 'blurred_and_distorted_vision', 'high_fever'],
    'Symptom_7': ['', '', '', 'yellowing_of_eyes', '', 'obesity', 'headache'],
    'Symptom_8': ['', '', '', '', '', 'excessive_hunger', 'nausea'],
    'Symptom_9': ['', '', '', '', '', 'increased_appetite', 'loss_of_appetite'],
    'Symptom_10': ['', '', '', '', '', 'polyuria', 'pain_behind_the_eyes'],
    'Symptom_11': ['', '', '', '', '', '', 'back_pain'],
    'Symptom_12': ['', '', '', '', '', '', 'muscle_pain'],
    'Symptom_13': ['', '', '', '', '', '', 'red_spots_over_body']
}

df = pd.DataFrame(data)

# Remover espaços extras ou caracteres especiais nos nomes das colunas
df.columns = df.columns.str.strip().str.replace(' ', '_')

# Separar a coluna 'Disease' como target (doença)
y = df['Disease']

# Remover a coluna 'Disease' antes da codificação one-hot dos sintomas
X = df.drop('Disease', axis=1)

# Converter variáveis categóricas em variáveis binárias
X = pd.get_dummies(X, drop_first=True)

# Dividir os dados em conjunto de treinamento e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Treinar o modelo de árvore de decisão
clf = DecisionTreeClassifier(random_state=42)
clf.fit(X_train, y_train)

# Fazer previsões no conjunto de teste
y_pred = clf.predict(X_test)

# Avaliar a acurácia do modelo
accuracy = accuracy_score(y_test, y_pred)
print("Acurácia do modelo de árvore de decisão:", accuracy)